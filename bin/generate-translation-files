#!/bin/bash

# This script compiles translation files for Ink/Stitch.
# - compiles .po files (Portable Object) into .mo files (Machine Object format)
# - requires the `msgfmt` command from the GNU gettext package

# Gettext Localization Workflow (Key Steps)
# -------------------------------------------
#   Mark Strings:
#	  - Developers wrap translatable text in code (e.g., _("Hello")).
#   Extract Template (xgettext):
#	  - xgettext scans code, extracts marked strings into a .pot (Portable Object Template) file.
#   Translate Strings (msginit / Translators):
#	  - Translators use the .pot to create language-specific .po (Portable Object) files (e.g., en_US.po, fr.po)
#	    and fill in translations. These are human-readable.
#   Compile Translations (msgfmt):
#	  - msgfmt compiles human-readable .po files into machine-readable, binary .mo (Machine Object)
#	    files (e.g., en_US.mo, fr.mo). This is its core role.
#   Use Translations (Application):
#	  - Applications load the appropriate .mo file at runtime to display translated messages quickly and efficiently.


set -e
MY_VERBOSITY_LOG_LEVEL=${MY_VERBOSITY_LOG_LEVEL:-1}  # Default level is 1 (INFO)
if [[ "$MY_VERBOSITY_LOG_LEVEL" -ge 2 ]]; then
    set -x
fi

# message files will look like this:
#   translations/messages_en_US.po
if ls translations/*.po > /dev/null 2>&1; then
	for po in translations/*.po; do
		lang=${po%.*};
		lang=${lang#*_};
		mkdir -p locales/$lang/LC_MESSAGES/;
		msgfmt $po -o locales/$lang/LC_MESSAGES/inkstitch.mo;
	done;
else
	mkdir -p locales;
fi;

# copy locales also into the inx folder, inkscape needs
# them to be in exactly that place
mkdir -p inx;
cp -r locales/ inx/locale/;
# for some reason inkscape requires the language folder names
# as a two letter code ("en" instead of "en_US")
cd inx/locale;
for language in */; do
	if [ ! -d ${language:0:2} ]; then
		mv -- $language ${language:0:2};
	fi;
done;
