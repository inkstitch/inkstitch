
# Action description:
#   https://docs.github.com/en/actions

name: UV Build

# when the workflow should run
on:
  push: # at least ones must be triggered by a push to be available for manual trigger
    tags:
      - 'build*'  # test build (linux on the fly sign)
      - 'v*.*.*'  # signed build
    # branches:
    #   - missing/*  # branch pattern **= any number of characters and /, * = any number of characters not including /

  workflow_dispatch:  # manual trigger of the workflow
    inputs:
      # input variables for manual run
      build_type:                   # ref: github.event.inputs.build_type
        description: 'Build type'
        required: true
        default: 'linux64'  # default value
        type: choice  # type of the input, can be number, boolean, string, choice or environment
        options:
          - linux64
          # - linux32
          - linux-arm64
          # - linux-arm32

          - windows64
          # - windows32
          # - windows-arm64
          # - windows-arm32

          # - macos64
          # - macos32
          # - macos-arm64
          # - macos-arm32

          - all

      sign_artifacts: # ref: github.event.inputs.sign_artifacts
        description: 'Digitally sign the generated build artifacts (requires signing credentials).'
        required: true
        default: 'yes'  # default value
        type: choice
        options:
          - 'yes' # Sign all generated artifacts
          - 'no'  # Skip digital signing


      break_on:     # ref: github.event.inputs.break_on
        description: 'Stop the build immediately at a predefined location.'
        required: true
        default: 'no'  # default value
        type: choice  # type of the input, can be number, boolean, string, choice or environment
        options:
          - 'no'    # normal build
          - 'uv'    # stop the build at the uv venv creation step


# working example: ----------------------------------------------------------
jobs:
  dump_contexts_to_log:
      runs-on: ubuntu-latest
      steps:
        - name: Dump GitHub context
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
          run: echo "$GITHUB_CONTEXT"
        - name: Dump job context
          env:
            JOB_CONTEXT: ${{ toJson(job) }}
          run: echo "$JOB_CONTEXT"
        - name: Dump steps context
          env:
            STEPS_CONTEXT: ${{ toJson(steps) }}
          run: echo "$STEPS_CONTEXT"
        - name: Dump runner context
          env:
            RUNNER_CONTEXT: ${{ toJson(runner) }}
          run: echo "$RUNNER_CONTEXT"
        - name: Dump strategy context
          env:
            STRATEGY_CONTEXT: ${{ toJson(strategy) }}
          run: echo "$STRATEGY_CONTEXT"
        - name: Dump matrix context
          env:
            MATRIX_CONTEXT: ${{ toJson(matrix) }}
          run: echo "$MATRIX_CONTEXT"

        - name: Exit
          run: exit 1

# ---------------------------------------------------------------------------
  prepare_build:
    needs: dump_contexts_to_log # this job depends on the dump_contexts_to_log job
    runs-on: ubuntu-latest
    outputs:
      # Define outputs that will be available for other jobs
      final_build_type: ${{ steps.set_vars.outputs.calculated_build_type }}
      final_break_on: ${{ steps.set_vars.outputs.calculated_break_on }}
    steps:
      - name: Set default build variables for Push event
        id: set_vars # Important for referencing the outputs of this step
        run: |

          # Info
          echo "Input Variables (github.event.inputs):"
          echo "  Build Type: ${{ github.event.inputs.build_type }}"
          echo "  Sign Artifacts: ${{ github.event.inputs.sign_artifacts }}"
          echo "  Break On: ${{ github.event.inputs.break_on }}"

          echo "  Event Name: ${{ github.event_name }}"
          echo "  Tag Name: ${{ github.ref_name }}"
          echo "  Branch Name: ${{ github.ref }}"
          echo "  Commit SHA: ${{ github.sha }}"
          echo "  Repository: ${{ github.repository }}"
          echo "  Event Ref: ${{ github.event.ref }}"
          echo "  Event Path: ${{ github.event_path }}"


          # Check if the event is a workflow_dispatch (manual trigger) or push
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              # If so, use the values from the inputs
            CALCULATED_BUILD_TYPE="${{ github.event.inputs.build_type }}"
            CALCULATED_BREAK_ON="${{ github.event.inputs.break_on }}"
          else
            # If not (i.e. it's a push or other event), use the defaults
            CALCULATED_BUILD_TYPE="linux64"
            CALCULATED_BREAK_ON="uv"
          fi

          echo "Calculated Build Type: $CALCULATED_BUILD_TYPE"
          echo "Calculated Stop Value: $CALCULATED_BREAK_ON"

          # Set the outputs for this step
          echo "calculated_build_type=${CALCULATED_BUILD_TYPE}" >> "$GITHUB_OUTPUT"
          echo "calculated_break_on=${CALCULATED_BREAK_ON}" >> "$GITHUB_OUTPUT"


  call_linux64_build:
    needs: prepare_build # this job depends on the prepare_build job
    if: >
      needs.prepare_build.outputs.final_build_type == 'linux64' ||
      needs.prepare_build.outputs.final_build_type == 'all'
    name: Build Linux64
    # - uses with reusable must be on job level, not on step level
    # - .yml must be on top level of .github/workflows/
    uses: ./.github/workflows/uv_build_linux64.yml # call reusable workflow
    with:
      break_on: ${{ needs.prepare_build.outputs.final_break_on }} # set input variable for the reusable workflow


  call_linux_arm64_build:
    needs: prepare_build # this job depends on the prepare_build job
    if: >
      needs.prepare_build.outputs.final_build_type == 'linux-arm64' ||
      needs.prepare_build.outputs.final_build_type == 'all'
    name: Build Linux-arm64
    uses: ./.github/workflows/uv_build_linux-arm64.yml # call reusable workflow
    with:
      break_on: ${{ needs.prepare_build.outputs.final_break_on }} # set input variable for the reusable workflow


  call_windows64_build:
    needs: prepare_build # this job depends on the prepare_build job
    if: >
      needs.prepare_build.outputs.final_build_type == 'windows64' ||
      needs.prepare_build.outputs.final_build_type == 'all'
    name: Build Windows64
    uses: ./.github/workflows/uv_build_windows64.yml # call reusable workflow
    with:
      break_on: ${{ needs.prepare_build.outputs.final_break_on }} # set input variable for the reusable workflow


#----------------------------------------------------
