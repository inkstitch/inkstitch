
name: UV Linux32 build

# when the workflow should run
on:
  workflow_call:  # manual trigger of the workflow
    inputs:

      break_on: # ref: inputs.break_on
        description:  'Stop the build immediately at a predefined location.'
        required: true
        default: 'no'    # default value
        type: string  # type of the input, can be string, boolean, or number

      self_signed:
        description: 'Sign on the fly'
        required: true
        default: true
        type: string

    secrets:  # secrets that are required for the workflow, otherwise are not available
      INKSTITCH_GPG_KEY:
        required: true

# Jobs are steps that run on the same runner
jobs:
  linux32:  # name of the job
    env:
      MY_BREAK_ON: ${{ github.event.inputs.break_on }}
      MY_SELF_SIGNED: ${{ github.event.inputs.self_signed }}

    # Node required for actions, install follows
    # https://github.com/actions/upload-artifact/issues/616
    runs-on: ubuntu-latest
    container:
      image: linuxmintd/lmde6-i386  # Linux Mint Debian Edition 6 (LMDE6) i386 - docker image
      volumes:
        # - ${{ github.workspace }}:/__e/node20 # don't use this, will be overwritten by most actions like checkout@v4 ...
        - my-node20-linux32:/__e/node20  # use persistent volume for node.js i386 installation, persistent in one workflow run


    steps:
      - name: Discover docker container environment
        shell: bash
        run: |

          echo "github.workspace: ${{ github.workspace }}"
          echo "--------------------------------------"

          echo "GITHUB_ environment variables:"
          env | grep '^GITHUB_'

          echo "-------------------------------------- mount (details in Initialize container)"
          mount

          echo "-------------------------------------- df -h"
          df -h

          echo "-------------------------------------- ls /tmp"
          ls -lar /tmp

          echo "-------------------------------------- ls -l /__e"
          ls -l /__e/*

          echo "-------------------------------------- ls /__e/node20"
          ls -lar /__e/node20

          echo "-------------------------------------- file /__e/node20/bin/node"
          if [[ -f /__e/node20/bin/node ]]; then   # if the file exists
            file /__e/node20/bin/node
            readelf -h /__e/node20/bin/node
          fi

          echo "-------------------------------------- ls /home"
          ls -l /home

          echo "-------------------------------------- ls /github"
          ls -l /github

          echo "-------------------------------------- whoami"
          whoami


      - name: Download & setup Node - needed by Checkout
        shell: bash
        run: |

          if [[ -z "$(ls -A /__e/node20)" ]]; then     # if the directory is empty
            echo "Installing Node.js 20.17.0 i386 to /__e/node20"
            apt-get update
            apt-get install -y curl  # we need curl to download node.js
            curl -Lo /tmp/node.tar.gz https://unofficial-builds.nodejs.org/download/release/v20.17.0/node-v20.17.0-linux-x86.tar.gz
            cd /__e/node20           # change to the mounted workspace directory
            tar -x --strip-components=1 -f /tmp/node.tar.gz # extract the node.js archive
          fi

          echo "-------------------------------------- ls /tmp"
          ls -lar /tmp

          echo "-------------------------------------- file /__e/node20/bin/node"
          file /__e/node20/bin/node

      # !!! this step effectively rewrites node installation done in the previous step !!!
      - name: Download Inkstitch # Download the source code, no submodules
        uses: actions/checkout@v4  # https://github.com/actions/checkout


      - name: Install uv  # https://docs.astral.sh/uv/guides/integration/github/
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Check architecture uv & python
        shell: bash
        run: |

          echo "-------------------------------------- PATH"
          echo "PATH=$PATH"

          echo "-------------------------------------- uv architecture"
          UV_PATH=$(type uv | awk '{print $NF}')
          file $UV_PATH


          echo "-------------------------------------- python architecture"
          python3 --version  # check python version
          python3 -c "import platform; print(platform.architecture())"

          PYTHON_PATH=$(type python3.11 | awk '{print $NF}')
          echo "PYTHON_PATH: $PYTHON_PATH"
          file $PYTHON_PATH  # check python version


      - name: Setup environment
        shell: bash
        run: |  # working directory is the root of the inkstitch repo

          # echo "-------------------------------------- system information: /etc/os-release"
          # # cat /etc/os-release
          # ls -lR /etc
          echo "-------------------------------------- system information: lsb_release -a"
          lsb_release -a
          uname -a  # print system information

          echo "-------------------------------------- input data"
          # input data
          echo "github.event.inputs.break_on: ${{ github.event.inputs.break_on }}"
          echo "inputs.break_on: ${{ inputs.break_on }}"

          echo "------------------------------ uv python list"
          uv python list
          uv python install 311

          uv python list
          uv python pin --managed-python 311  # pin to downloaded python, if not use system, else download
          # uv python pin --un-managed-python 311
          uv venv  # create a virtual environment with the pinned python version

          echo "-------------------------------------- activate virtual environment"
          . .venv/bin/activate
          echo "-------------------------------------- python architecture"
          file .venv/bin/python  # check python version in the virtual environment
          python3 -c "import platform; print(platform.architecture())"


          if [[ ${{ inputs.break_on }} == "uv" ]]; then
            echo "Stopping on request"
            exit 1
          fi

          echo "-------------------------------------- update apt"
          # install system dependencies
          sudo apt-get update  # update package list

          sudo apt-get install -y ruby-full # install Ruby for fpm packaging
          sudo gem install fpm # install fpm for packaging (Ruby gems)
          sudo apt-get install -y gettext # install gettext for translations (.po msgfmt)

          # for PyGObject 3.50 to compile
          sudo apt install -y libgirepository1.0-dev libcairo2-dev

          # for wxPython run
          sudo apt install -y libnotify4
          sudo apt install -y glib-networking libsdl2-2.0-0  libsdl2-dev

          # for shapely & wxPython compile
          sudo apt install -y build-essential libgtk-3-dev # cmake - use uv to install cmake
          sudo apt install -y libgeos-dev

          # for signing rpm
          apt-get install -y rpm

          echo "-------------------------------------- bin/uv/generate pyproject.toml"
          bin/uv/generate_pyproject.sh # generate pyproject.toml from uv config

          # debug

          echo "-------------------------------------- pyproject.toml"
          cat pyproject.toml

          echo "-------------------------------------- uv sync"
          uv sync # install dependencies from pyproject.toml

          # . .venv/bin/activate  # activate the virtual environment
          # type python

          # echo "pythonLocation: ${{ env.pythonLocation }}"  # empty - what is this good for
          # echo "GITHUB_PATH: $GITHUB_PATH"

          echo "--------------------------------------"

      - name: Build dist
        shell: bash
        run: |

          . .venv/bin/activate  # activate the virtual environment
          type python  # check python version

          echo "secrets.INKSTITCH_GPG_KEY: ${{ secrets.INKSTITCH_GPG_KEY }}" # *** if available
          make dist

          # see artifacts directory contents
          echo "-------------------------------------- artifacts directory:"
          ls -lR artifacts

        env:
          BUILD: linux32
          # load secrets for bash script
          INKSTITCH_GPG_KEY: ${{ secrets.INKSTITCH_GPG_KEY }}

      # save the build artifacts for later use by other jobs
      - uses: actions/upload-artifact@v4   # https://github.com/actions/upload-artifact
        with:
          name: inkstitch-linux32      # to path
          path: artifacts              # from path relative to the root of the repository



