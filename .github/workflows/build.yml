name: Build
on:
  push:
    branches-ignore:
      - master
      - main
    tags:
      - "v*"
jobs:
  linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.x'
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
      - uses: actions/cache@v3
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-20.04-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-20.04-pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: install dependencies
        shell: bash
        run: |
          sudo apt-get update
          python -m pip install --upgrade pip
          python -m pip install wheel

          sudo apt-get install gettext

          # for wxPython
          sudo apt install libnotify4
          sudo apt install glib-networking libsdl2-dev libsdl2-2.0-0

          # for PyGObject
          sudo apt install libgirepository1.0-dev libcairo2-dev

          # for shapely
          sudo apt install build-essential libgtk-3-dev

          uname -a
          python --version
          python -m pip --version
          python -m pip debug

          python -m pip install pycairo
          python -m pip install PyGObject

          python -m pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.1.1-cp38-cp38-linux_x86_64.whl

          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

          # scipy gives us a ELF error when stripped
          sudo apt-get install gcc g++ gfortran python3-dev libopenblas-dev liblapack-dev
          python -m pip uninstall --yes scipy
          python -m pip install scipy --no-binary scipy

          echo "${{ env.pythonLocation }}\bin" >> $GITHUB_PATH
      - shell: bash
        run: |
          make dist
        env:
          BUILD: linux
          INKSTITCH_GPG_KEY: ${{ secrets.INKSTITCH_GPG_KEY }}
      - uses: actions/upload-artifact@v3
        with:
          name: inkstitch-linux
          path: artifacts
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.x'
          architecture: 'x86'
      - uses: microsoft/setup-msbuild@v1.3.1
      - name: install dependencies
        shell: bash
        run: |
          git config --system core.longpaths true
          python -m pip install --upgrade pip
          python -m pip install wheel
          # scipy 1.9.1 is the last version to support 32-bit windows
          python -m pip install scipy==1.9.1
          python -m pip install wxpython==4.1.1
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

          echo "${{ env.pythonLocation }}\bin" >> $GITHUB_PATH
      - shell: bash
        run: |
          make dist
        env:
          BUILD: windows
      - uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.INKSTITCH_CODE_SIGNING_CERTIFICATE }}'
          folder: 'dist'
          recursive: true
      - shell: bash
        run: |
          bash bin/build-windows-installer
        env:
          BUILD: windows
      - uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.INKSTITCH_CODE_SIGNING_CERTIFICATE }}'
          folder: 'artifacts'
      - uses: actions/upload-artifact@v3
        with:
          name: inkstitch-windows
          path: artifacts
  mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.x'
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: install dependencies
        shell: bash
        run: |
          brew update

          brew install gtk+3 pkg-config gobject-introspection geos libffi gettext || true

          export LDFLAGS="-L/usr/local/opt/libffi/lib"
          export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"

          # for msgfmt
          echo "/usr/local/opt/gettext/bin" >> $GITHUB_PATH

          echo "GI_TYPELIB_PATH=/usr/local/lib/girepository-1.0/" >> $GITHUB_ENV

          pip install --upgrade pip
          pip --version
          pip install wheel
          pip install PyGObject
          pip install wxpython==4.1.1
          pip install -r requirements.txt
          # with --no-binary argument may fix notary issues as well shapely speedups error issue
          pip install -U lxml --no-binary lxml
          pip uninstall --yes shapely
          pip install -v -U Shapely==1.8.5 --no-binary Shapely
          pip install pyinstaller

          echo "${{ env.pythonLocation }}/bin" >> $GITHUB_PATH
      - shell: bash
        run: |
          make dist
        env:
          BUILD: osx
          MACOS_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}
          INSTALLER_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE }}
          INSTALLER_PWD: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE_PASSWORD }}
          NOTARY_ACCOUNT: ${{ secrets.INKSTITCH_NOTARIZE_AC }}
          NOTARY_PASSWORD: ${{ secrets.INKSTITCH_NOTARIZE_PASS }}


      - uses: actions/upload-artifact@v3
        with:
          name: inkstitch-mac
          path: artifacts

  release:
    runs-on: ubuntu-latest
    needs: [linux, windows, mac]
    if: always()
    steps:
      - name: determine release info
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v[0-9.]+$ ]]; then
            tag="${GITHUB_REF#refs/tags/}"
            echo "release_tag=${tag}" >> $GITHUB_ENV
            echo "prerelease=false" >> $GITHUB_ENV
            echo "title=${tag}" >> $GITHUB_ENV
          else
            branch="${GITHUB_REF#refs/heads/}"
            tag="dev-build-$(echo $branch | tr / -)"
            echo "release_tag=${tag}" >> $GITHUB_ENV
            echo "prerelease=true" >> $GITHUB_ENV
            echo "title=development build of $branch" >> $GITHUB_ENV
          fi
      - name: download linux
        uses: actions/download-artifact@v3
        with:
          name: 'inkstitch-linux'
          path: 'artifacts/'
      - name: download windows
        uses: actions/download-artifact@v3
        with:
          name: 'inkstitch-windows'
          path: 'artifacts/'
        if: always()
      - name: download mac
        uses: actions/download-artifact@v3
        with:
          name: 'inkstitch-mac'
          path: 'artifacts/'
        if: always()
      - name: create/update release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: always()
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "${{env.release_tag}}"
          prerelease: "${{env.prerelease}}"
          title: "${{env.title}}"
          files: |
            artifacts/*.exe
            artifacts/*.pkg
            artifacts/*.deb
            artifacts/*.rpm
            artifacts/*.tar.xz
            artifacts/*.sh
            artifacts/*.zip
