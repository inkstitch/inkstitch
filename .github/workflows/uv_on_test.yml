
name: UV On Test

on:
  push:
    tags: # valid only for the HEAD of the repository
      - 'on-test*' # run workflow on tags that start with 'on-test'"

# inputs...: new, keeps var types, common interface for workflow_dispatch & workflow_call
#   vs
# github.event.inputs...: old, only string, only for workflow_dispatch

  workflow_dispatch:  # manual trigger of the workflow
    inputs:
      message: # ref: inputs.message | github.event.inputs.message
        description: 'A custom message to display'
        required: false
        default: 'Hello from manual trigger!'
        type: string

      number:
        description: "test number"
        required: false
        default: 0
        type: number


# global variables:
env:
  MY_GLOBAL_VAR: 'value of MY_GLOBAL_VAR'

jobs:
  job1:
    name: Job1 name
    runs-on: ubuntu-latest
    env:
      MY_JOB1: "value of MY_JOB1"  # job-level environment variable, accessible in all steps of this job
      MY_GLOBAL_VAR: "overridden value of MY_GLOBAL_VAR"  # override global variable in this job

    outputs:
      MY_JOB1_OUT: ""

    steps:
      - name: Step1 name
        id: step1
        shell: bash
        run: |  # run

          echo "${{ toJSON(github.event.inputs) }}"
          echo "MY_GLOBAL_VAR: $MY_GLOBAL_VAR"  # access global variable in env

          echo "MY_MSG=${{ github.event.inputs.message }}" >> $GITHUB_ENV # set env var accessible in subsequent steps, not in actual
          echo "MY_JOB1=\"overridden MY_JOB1\"" >> $GITHUB_ENV # set env var accessible in subsequent steps, not in actual

          MY_MSG2="message 2"  # only accessible in this step

          echo "---------------------------------"
          echo "MY_MSG=$MY_MSG"   # access env variable set in this step
          echo "MY_MSG2=$MY_MSG2" # access step variable
          echo "MY_JOB1=$MY_JOB1"  # access job-level variable

          # set output
          echo "MY_JOB1_OUT=\"Job1 output\"" >> $GITHUB_OUTPUT

          echo "---------------------------------"
          printenv | sort


      - name: Step2 name
        id: step2
        run: |

          echo "${{ toJSON(github.event.inputs) }}"
          echo "---------------------------------"
          echo "${{ toJSON(inputs) }}"
          echo "---------------------------------"
          env | sort

  job2:
    needs: job1
    name: job2 name
    runs-on: ubuntu-latest
    steps:
      - name: Step1 name
        id: step1
        shell: bash
        run: |

          echo "${{ toJSON(github.event.inputs) }}"
          echo "---------------------------------"
          echo "${{ toJSON(inputs) }}"
          echo "---------------------------------"
          echo "${{ toJSON(needs) }}"
          echo "---------------------------------"
          printenv | sort
