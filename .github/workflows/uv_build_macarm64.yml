
name: UV Mac arm64 build

# when the workflow should run
on:
  workflow_call:  # manual trigger of the workflow
    inputs:

      break_on: # ref: inputs.break_on
        description:  'Stop the build immediately at a predefined location.'
        required: true
        default: 'no'    # default value
        type: string  # type of the input, can be string, boolean, or number

      self_signed:
        description: 'Sign on the fly'
        required: true
        default: true
        type: string

    secrets:  # secrets that are required for the workflow, otherwise are not available
      INKSTITCH_APPLE_DEVELOPER_CERTIFICATE:
        required: true
      INKSTITCH_APPLE_DEVELOPER_CERTIFICATE_PASSWORD:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      INKSTITCH_APPLE_INSTALLER_CERTIFICATE:
        required: true
      INKSTITCH_APPLE_INSTALLER_CERTIFICATE_PASSWORD:
        required: true
      INKSTITCH_NOTARIZE_AC:
        required: true
      INKSTITCH_NOTARIZE_PASS:
        required: true



jobs:
  macarm64:  # name of the job
    env:
      MY_BREAK_ON: ${{ github.event.inputs.break_on }}
      MY_SELF_SIGNED: ${{ github.event.inputs.self_signed }}

    # define the OS of the runner
    runs-on: macos-latest

    steps:
      - name: Download Inkstitch # Download the source code, no submodules
        uses: actions/checkout@v4

      - name: Install uv  # https://docs.astral.sh/uv/guides/integration/github/
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup environment
        shell: bash
        run: |  # working directory is the root of the inkstitch repo

          echo "------------------------------------- system information: sw_vers"
          sw_vers

          echo "------------------------------------- input data"
          # input data
          echo "github.event.inputs.break_on: ${{ github.event.inputs.break_on }}"
          echo "inputs.break_on: ${{ inputs.break_on }}"

          echo "------------------------------ uv python list"
          uv python list
          uv python pin 311  # pin to local python version
          uv venv  # create a virtual environment with the pinned python version

          if [[ ${{ inputs.break_on }} == "uv" ]]; then
            echo "Stopping on request"
            exit 1
          fi

          echo "-------------------------------------- update homebrew"
          brew update

          # brew install gtk+3 pkg-config gobject-introspection geos libffi gettext jq gnu-getopt || true

          # export LDFLAGS="-L/usr/local/opt/libffi/lib"
          # export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"

          echo "-------------------------------------- bin/uv/generate pyproject.toml"
          bin/uv/generate_pyproject.sh # generate pyproject.toml from uv config

          # debug

          echo "-------------------------------------- pyproject.toml"
          cat pyproject.toml

          echo "-------------------------------------- uv sync"
          uv sync # install dependencies from pyproject.toml

          # . .venv/bin/activate  # activate the virtual environment
          # type python

          # echo "pythonLocation: ${{ env.pythonLocation }}"  # empty - what is this good for
          # echo "GITHUB_PATH: $GITHUB_PATH"


      - name: Build dist
        shell: bash
        run: |

          . .venv/bin/activate  # activate the virtual environment
          type python  # check python version

          echo "secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE }}" # *** if available
          echo "secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE_PASSWORD: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" # *** if available
          echo "secrets.KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}" # *** if available
          echo "secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE }}" # *** if available
          echo "secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE_PASSWORD }}" # *** if available
          echo "secrets.INKSTITCH_NOTARIZE_AC: ${{ secrets.INKSTITCH_NOTARIZE_AC }}" # *** if available
          echo "secrets.INKSTITCH_NOTARIZE_PASS: ${{ secrets.INKSTITCH_NOTARIZE_PASS }}" # *** if available
          echo "secrets.KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}" # *** if available

          make dist

          # see artifacts directory contents
          echo "-------------------------------------- artifacts directory:"
          ls -lR artifacts

        env:
          BUILD: osx
          # load secrets for bash script
          MACOS_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}
          INSTALLER_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE }}
          INSTALLER_PWD: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE_PASSWORD }}
          NOTARY_ACCOUNT: ${{ secrets.INKSTITCH_NOTARIZE_AC }}
          NOTARY_PASSWORD: ${{ secrets.INKSTITCH_NOTARIZE_PASS }}

      # save the build artifacts for later use by other jobs
      - uses: actions/upload-artifact@v4   # https://github.com/actions/upload-artifact
        with:
          name: inkstitch-mac-arm64          # to path
          path: artifacts                  # from path relative to the root of the repository
