
name: UV Linux-arm64 build

# when the workflow should run
on:
  workflow_call:  # manual trigger of the workflow
    inputs:

      break_on: # ref: inputs.break_on
        description:  'Stop the build immediately at a predefined location.'
        required: true
        default: 'no'    # default value
        type: string  # type of the input, can be string, boolean, or number

      self_signed:
        description: 'Sign on the fly'
        required: true
        default: true
        type: string

    secrets:  # secrets that are required for the workflow, otherwise are not available
      INKSTITCH_GPG_KEY:
        required: true



# Jobs are steps that run on the same runner
jobs:
  linux-arm64: # name of the job
    env:
      MY_BREAK_ON: ${{ github.event.inputs.break_on }}
      MY_SELF_SIGNED: ${{ github.event.inputs.self_signed }}

    # define the OS of the runner - PyGObject is OS dependent
    runs-on: ubuntu-22.04-arm

    # steps are a sequence of commands that will be executed
    steps:
      - name: Download Inkstitch # Download the source code, no submodules
        uses: actions/checkout@v4  # https://github.com/actions/checkout


      - name: Update OS    # first update OS
        shell: bash
        run: |

          echo "-------------------------------------- system information: /etc/os-release"
          cat /etc/os-release
          echo "-------------------------------------- system information: lsb_release -a"
          lsb_release -a
          uname -a  # print system information

          echo "-------------------------------------- input data"
          # input data
          echo "github.event.inputs.break_on: ${{ github.event.inputs.break_on }}"
          echo "inputs.break_on: ${{ inputs.break_on }}"

          echo "-------------------------------------- update apt"
          # install system dependencies
          sudo apt-get update  # update package list

          sudo gem install fpm # install fpm for packaging (Ruby gems)
          sudo apt-get install -y gettext # install gettext for translations (.po msgfmt)

          # for PyGObject 3.50 to compile
          sudo apt install -y libgirepository1.0-dev libcairo2-dev

          # for wxPython run & compile (around 25 minutes first run)
          sudo apt install -y libnotify4
          sudo apt install -y glib-networking libsdl2-2.0-0  libsdl2-dev

          # for shapely & wxPython compile
          sudo apt install -y build-essential libgtk-3-dev # cmake - use uv to install cmake


      - name: Install uv
        uses: astral-sh/setup-uv@v5  # https://docs.astral.sh/uv/guides/integration/github/
        with:
          enable-cache: true    # cache on requirements**, uv.lock is OS dependent, on exit 1 cache save is skipped
          python-version: 311   # force version, use same in install python

      - name: Setup UV Python
        shell: bash
        run: |  # working directory is the root of the inkstitch repo

          echo "------------------------------ uv python list"
          uv python install 311  # install python 3.11 see cache
          uv python list
          uv python pin --managed-python 311  # pin to uv managed python
          uv venv  # create a virtual environment with the pinned python version

          if [[ $MY_BREAK_ON == "uv" ]]; then
            echo "Stopping on request $MY_BREAK_ON"
            exit 1
          fi

          echo "-------------------------------------- bin/uv/generate pyproject.toml"
          bin/uv/generate_pyproject.sh # generate pyproject.toml from uv config

          # debug

          echo "-------------------------------------- pyproject.toml"
          cat pyproject.toml

          echo "-------------------------------------- uv sync"
          uv sync # install dependencies from pyproject.toml

          if [[ $MY_BREAK_ON == "sync" ]]; then
            echo "Stopping on request $MY_BREAK_ON"
            exit 1
          fi

          echo "--------------------------------------"

      - name: Build dist
        shell: bash
        run: |

          . .venv/bin/activate  # activate the virtual environment
          type python  # check python version

          echo "secrets.INKSTITCH_GPG_KEY: ${{ secrets.INKSTITCH_GPG_KEY }}" # *** if available
          make dist   # requires correct BUILD !!!

          # see artifacts directory contents
          echo "-------------------------------------- artifacts directory:"
          ls -lR artifacts

        env:
          BUILD: linux
          # load secrets for bash script
          INKSTITCH_GPG_KEY: ${{ secrets.INKSTITCH_GPG_KEY }}

      # save the build artifacts for later use by other jobs
      - uses: actions/upload-artifact@v4   # https://github.com/actions/upload-artifact
        with:
          name: inkstitch-linuxarm64   # to path
          path: artifacts              # from path relative to the root of the repository

