name: UV Windows64 build

# when the workflow should run
on:
  workflow_call:  # manual trigger of the workflow
    inputs:
      break_on: # access: inputs.break_on
        description:  'Stop the build immediately at a predefined location.'
        required: true
        default: 'no'    # default value
        type: string  # type of the input, can be string, boolean, or number


# Jobs are steps that run on the same runner
jobs:
  windows64:  # name of the job
    # define the OS of the runner
    runs-on: windows-2019
    steps:
      - name: Download Inkstitch # Download the source code, no submodules
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5 # https://github.com/actions/setup-python
        with:
          python-version: '3.11.x'
          architecture: 'x64'

      - name: Install uv  # https://docs.astral.sh/uv/guides/integration/github/
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install msbuild # https://github.com/microsoft/setup-msbuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup Git for Windows SDK # https://github.com/git-for-windows/setup-git-for-windows-sdk
        uses: git-for-windows/setup-git-for-windows-sdk@v1
        with:
          flavor: build-installers

      - name: Setup environment
        shell: bash
        run: |

          git config --system core.longpaths true

          # input data
          echo "github.event.inputs.break_on: ${{ github.event.inputs.break_on }}"
          echo "inputs.break_on: ${{ inputs.break_on }}"

          uv python list
          uv python pin 311  # pin to local python version
          uv venv  # create a virtual environment with the pinned python version

          if [[ ${{ inputs.break_on }} == "uv" ]]; then
            echo "Stopping on request"
            exit 1
          fi


          bin/uv/generate_pyproject.sh # generate pyproject.toml from uv config

          cat pyproject.toml

          uv sync # install dependencies from pyproject.toml

          . .venv/Scripts/activate  # activate the virtual environment
          type python

          # echo "Setting up Python location: ${{ env.pythonLocation }}"
          # echo "${{ env.pythonLocation }}\bin" >> $GITHUB_PATH


      - name: Build dist
        shell: bash
        run: |

          . .venv/Scripts/activate  # activate the virtual environment
          type python  # check python version
          # python --version

          make dist
        env:
          BUILD: windows



